# Name of the workflow as it will appear in the GitHub Actions UI.
name: Playwright CI/CD

# Event that triggers the workflow.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A job is a set of steps that execute on a runner.
jobs:
  test-automation:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out your repository code.
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up Node.js.
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Step 3: Add caching for npm dependencies.
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm # The path to cache the npm packages.
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # A unique key for the cache.
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 4: Add caching for Playwright browsers.
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright # The path where Playwright stores browsers.
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    # Step 5: Install project dependencies from your package-lock.json file.
    - name: Install dependencies
      run: npm ci

    # Step 6: Install the necessary Playwright browsers.
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    # Step 7: Run your Playwright tests with debug flags.
    - name: Run Playwright tests
      run: npx playwright test --debug
      env:
        PWDEBUG: 1

    # Step 8: Upload the test report as a workflow artifact.
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
